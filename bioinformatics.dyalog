⍝ Note: tacit entries not allowed by the competition
rna ← {('T' ⎕R 'U') ⍵}

⍝ Note: tacit entries not allowed by the competition
revc ← {⌽ {'TAGC'⊃⍨'ATCG'⍳⍵}¨ ⍵}

prot ← {
    ⍝ List of codons generated by RNA triplets.
    ⍝ Entries are ordered by their triplet lexicographically, and
    ⍝ bases are ordered by U→C→A→G.
    ⍝ Stop codons are represented by '!'.
    key ← 'FFLLSSSSYY!!CC!WLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG'
    truncated ← ((≢-3|≢) ⍵) ⍴ ⍵
    triples ← ((≢truncated) ⍴ 1 0 0) ⊂ truncated
    proteins ← {key ⊃⍨ 1+ 4⊥ ¯1+ 'UCAG'⍳⍵}¨ triples
    ⍝ Remove inline stop codons 
    {(∧\'!'≠⍵) / ⍵} proteins
}

readFASTA ← {
    content ← ⊃⎕NGET ⍵
    pattern ← '>(?P<name>[^ \n]*)(?: [^\n]*)?\n(?P<genome>[ACTG\r\n]*)'
    ⍝ Note: ⎕S can return only a single string per match when used this way,
    ⍝ so we join the extracted groups together with a space.
    ⍝ Also, document mode is used to be able to match newlines in patterns.
    matches ← (pattern ⎕S '\<name> \<genome>' ⍠ 'Mode' 'D') content
    ⍝ Strip newlines from genome data
    process ← { 
        name genome ← ' '(≠⊆⊢)⍵
        name (('[\r\n]' ⎕R '' ⍠ 'Mode' 'D') genome) 
    }
    process¨ matches
}

orf ← {
    source ← 2⊃⊃ readFASTA ⍵
    offset ← {(↓∘⍵)¨0 1 2}
    ⍝ Each of the 6 possible readings of the DNA string
    frames ← (offset∘rna,offset∘rna∘revc) source
    aligned ← {(0=3|⍵)/⍵}
    ⍝ Consider substrings that begin with a 3-char aligned start codon
    prefixes ← (⊃,/) {⍵∘(↓⍨)¨ aligned ¯1+ ⍸'AUG'⍷⍵}¨ frames
    ⍝ Remove substrings that doesn't end with a stop codon
    strings ← (⊃,/) {⍵∘(↑⍨)¨ aligned ('UAA|UAG|UGA'⎕S 0)⍵}¨ prefixes
    ∪ prot¨ strings
}
